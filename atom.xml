<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[joelparsons.net]]></title>
  <link href="http://joelparsons.github.io/atom.xml" rel="self"/>
  <link href="http://joelparsons.github.io/"/>
  <updated>2013-08-26T15:16:42+01:00</updated>
  <id>http://joelparsons.github.io/</id>
  <author>
    <name><![CDATA[Joel Parsons]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code Runner]]></title>
    <link href="http://joelparsons.github.io/blog/2013/08/26/code-runner/"/>
    <updated>2013-08-26T14:35:00+01:00</updated>
    <id>http://joelparsons.github.io/blog/2013/08/26/code-runner</id>
    <content type="html"><![CDATA[<p><a href="http://krillapps.com/coderunner/">Code runner</a> (also available in the <a href="http://itunes.apple.com/us/app/coderunner/id433335799?mt=12">Mac App Store</a>) is a fantastic app that should be in every iOS and Mac developer&rsquo;s toolkit.</p>

<p>If you are ever in the middle of a project and want to write a quick snippet to determine if an API is going to respond the way you think it will then Code Runner can help you out. Quite simply it sets up an environment where you can just start typing in your language of choice and, when you&rsquo;re ready to test, has a giant play button similar to Xcode that will run your code.</p>

<p>Heres an example from the other day. I wanted to do a check on the iOS system version for a very particular edge case and I was browsing through all the terrible and overly complicated comparison functions proffered in <a href="http://stackoverflow.com/questions/3339722/check-iphone-ios-version">this Stack Overflow Question</a> and came across the option of using the built in <code>NSNumericSearch</code> option for <code>compare:options:</code>. I wanted to verify this method would work correctly with different version numbers so I fired up code runner and tried out this small programme with a few different version numbers</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span> <span class="n">version1</span> <span class="o">=</span> <span class="s">@&quot;1.9.1&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span> <span class="n">version2</span> <span class="o">=</span> <span class="s">@&quot;1.100.1&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSComparisonResult</span> <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">version1</span> <span class="nl">compare:</span><span class="n">version2</span> <span class="nl">options:</span><span class="n">NSNumericSearch</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">NSOrderedAscending</span><span class="p">){</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Ascending&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">==</span> <span class="n">NSOrderedSame</span><span class="p">){</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Same&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Decending&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Very quickly I had determined that the option worked as advertised and was able to include it in my code with the relevant test cases.</p>

<h2>Debugging</h2>

<p>If you make a typo in Code Runner it can be hard to debug as you dont necessarily get a stack trace or other information on code crash. Luckily Code Runner has the option to add custom running environments to its editor and by duplicating and slightly tweaking the existing objective-c template I was able to make it run the code in the lldb debugger.</p>

<p><img src="http://joelparsons.github.io/images/lldb.jpg" title="" alt="configuration for running with the lldb debugger" /></p>

<p>When you click the play button it fires up lldb and will load your executable. To run you can type r and hit return. You can also use all the other lldb commands you would expect like add breakpoints and inspect variables at runtime. Its not as nice as the interface in Xcode but the liklihood is that the issues you will encounter wont be as hard to debug!</p>

<h2>Classes, Protocols, Categories and more</h2>

<p>I&rsquo;m not sure its widely known that we keep our classes in separate files out of convention rather than necessity but with this knowledge your use of Code Runner can become quite advanced indeed. It can be used to prototype classes and methods on those classes that can quickly be integrated into a larger application. It can even be handy if practising computer science style challenges.</p>

<p>Heres an example where I was practising determining if a string was a permutation of another string. This is more of a trick question as once you realise that all permutations of any particular string are contained in a doubled version of that string the implementation is straightforward. Here I&rsquo;ve implemented the check in code runner but as a category method on <code>NSString</code></p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">NSString</span> <span class="nl">(permutation)</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isPermutationOfString:</span><span class="p">(</span><span class="n">NSString</span> <span class="err">\</span><span class="o">*</span><span class="p">)</span><span class="nv">string</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">NSString</span> <span class="nl">(permutation)</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">isPermutationOfString:</span><span class="p">(</span><span class="n">NSString</span> <span class="err">\</span><span class="o">*</span><span class="p">)</span><span class="nv">string</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span> <span class="n">doubleSelf</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">stringByAppendingString:</span><span class="n">self</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSRange</span> <span class="n">range</span> <span class="o">=</span> <span class="p">[</span><span class="n">doubleSelf</span> <span class="nl">rangeOfString:</span><span class="n">string</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">range</span><span class="p">.</span><span class="n">location</span> <span class="o">==</span> <span class="n">NSNotFound</span><span class="p">)</span> <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span> <span class="n">permutation</span> <span class="o">=</span> <span class="s">@&quot;elloh&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span> <span class="n">test</span> <span class="o">=</span> <span class="s">@&quot;hello&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,[</span><span class="n">permutation</span> <span class="nl">isPermutationOfString:</span><span class="n">test</span><span class="p">]</span> <span class="o">?</span> <span class="s">@&quot;YES&quot;</span> <span class="o">:</span> <span class="s">@&quot;NO&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I reccommend you check out Code Runner. Its well worth the money and it can save you time with your development.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Boggle Board Question]]></title>
    <link href="http://joelparsons.github.io/blog/2013/06/25/the-boggle-board/"/>
    <updated>2013-06-25T14:12:00+01:00</updated>
    <id>http://joelparsons.github.io/blog/2013/06/25/the-boggle-board</id>
    <content type="html"><![CDATA[<p>So I was looking into the &ldquo;Boggle Board&rdquo; question which is posted on several programming interview sites. The question is pretty straight forward even if you dont know the game &ldquo;boggle&rdquo; which it is based on. You have a nxm matrix of letters and the aim of the game is to make words from those letters. From any arbitraty starting letter you are allowed to travel from letter to letter in any direction including diagonals with the restriction that you cant use the same letter twice.</p>

<p>The interview quetion usually asks candidates to to determine, given a 4x4 boggle board, whether a given word is in the board.</p>

<p>The problem seems deceptively simple but the requirement that you mustnt revisit a letter means that any kind of recursive solution is going to have to keep track of a whole bunch of state and get messy really quickly.</p>

<h2>Graph Search</h2>

<p>The simplicity of a graph search based solution becomes apparent if you solve the meaty part of the problem first.</p>

<p>To solve this problem with a graph search algorithm we need the letters in a graph. Lets create a node object that we can build a graph out of:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">Node</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span> <span class="n">letter</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSMutableSet</span> <span class="o">*</span> <span class="n">adjacentNodes</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We would create a <code>Node \*</code> for each letter in the boggle board and then link it to the nodes that letter is adjacent to. There is now no need to store the Nodes in an array matrix that represents the board or anything like that as all the information about the board we need is encapsulated in these two pieces of data. Now assuming we can get the board represented in a bunch of <code>Node</code> objects all in an <code>NSSet</code> the algorithm for searching through them is relatively simple.</p>

<p>We take each <code>Node</code> in turn and do a depth first search on its neighbours for a match for the next letter in the word we are checking for.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">BOOL</span> <span class="nf">searchForWord</span><span class="p">((</span><span class="n">NSString</span> <span class="err">\</span><span class="o">*</span><span class="p">)</span><span class="n">word</span><span class="p">,</span> <span class="n">NSSet</span> <span class="o">*</span> <span class="n">nodeGraph</span><span class="p">){</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span> <span class="n">firstLetter</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%c&quot;</span><span class="p">,[</span><span class="n">word</span> <span class="nl">characterAtIndex:</span><span class="mi">0</span><span class="p">]];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">Node</span> <span class="o">*</span> <span class="n">node</span> <span class="k">in</span> <span class="n">nodeGraph</span><span class="p">){</span>
</span><span class='line'>        <span class="n">NSMutableSet</span> <span class="o">*</span> <span class="n">visitedNodes</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableSet</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCapacity:</span><span class="n">word</span><span class="p">.</span><span class="n">length</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">BOOL</span> <span class="n">found</span> <span class="o">=</span> <span class="n">depthFirstSearch</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">word</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">visitedNodes</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">)</span> <span class="k">return</span> <span class="n">found</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For the <code>depthFirstSearch</code> function we need to do a few things.
1. Keep track of visited Nodes so we don&rsquo;t visit the same one twice
2. Keep track of depth so we know our position in the word
3. Recursively search through the adjacent nodes</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">BOOL</span> <span class="nf">depthFirstSearch</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span> <span class="n">node</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span> <span class="n">word</span><span class="p">,</span> <span class="n">NSInteger</span> <span class="n">depth</span><span class="p">,</span> <span class="n">NSMutableSet</span> <span class="o">*</span> <span class="n">visitedNodes</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">unichar</span> <span class="n">nodeLetter</span> <span class="o">=</span> <span class="p">[</span><span class="n">node</span><span class="p">.</span><span class="n">letter</span> <span class="nl">characterAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">unichar</span> <span class="n">wordLetter</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span> <span class="nl">characterAtIndex:</span><span class="n">depth</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">visitedNodes</span> <span class="nl">addObject:</span><span class="n">node</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">nodeLetter</span> <span class="o">==</span> <span class="n">wordLetter</span><span class="p">){</span>
</span><span class='line'>        <span class="c1">//if we have a match and have letters left keep searching</span>
</span><span class='line'>        <span class="c1">//else we are at the end of the word so return YES</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">depth</span> <span class="o">&lt;</span> <span class="n">word</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="n">Node</span> <span class="o">*</span> <span class="n">adjacentNode</span> <span class="k">in</span> <span class="n">node</span><span class="p">.</span><span class="n">adjacentNodes</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">([</span><span class="n">visitedNodes</span> <span class="nl">containsObject:</span><span class="n">adjacentNode</span><span class="p">])</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="kt">BOOL</span> <span class="n">found</span> <span class="o">=</span> <span class="n">depthFirstSearch</span><span class="p">(</span><span class="n">adjacentNode</span><span class="p">,</span> <span class="n">word</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">visitedNodes</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">)</span> <span class="k">return</span> <span class="n">found</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">visitedNodes</span> <span class="nl">removeObject:</span><span class="n">node</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And thats it. Two simple functions achieve the objectives of the questions in 30 lines of code. For some interviewers this may be enough as this is considered to be the hard part of the question.</p>

<h2>Going Further</h2>

<p>There are several directions you could take this to make it more fully formed. For example, given a matrix of arrays could we build the graph? Also if were keeping the graph around it might make sense to make a graph object and make the search a method on a graph instance along with a graph generation method on the class. Ive tied it all together in a excerpt you can actually paste and run into an xcode command line app.</p>

<figure class='code'><figcaption><span>main.m </span><a href='https://gist.github.com/joelparsons/5666671'>Github Gist </a></figcaption> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Node</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span> <span class="n">letter</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSMutableSet</span> <span class="o">*</span> <span class="n">adjacentNodes</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Node</span>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="n">NSMutableSet</span> <span class="o">*</span><span class="p">)</span><span class="nf">adjacentNodes</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">_adjacentNodes</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">_adjacentNodes</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">_adjacentNodes</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableSet</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_adjacentNodes</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">@interface</span> <span class="nc">Graph</span> : <span class="nc">NSObject</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSSet</span> <span class="o">*</span> <span class="n">nodes</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">strong</span><span class="p">)</span> <span class="n">NSDictionary</span> <span class="o">*</span> <span class="n">lookupDictionary</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span><span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">graphForBoggleBoard:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">board</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">searchForWord:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">word</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">Graph</span>
</span><span class='line'>
</span><span class='line'><span class="k">+</span><span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">graphForBoggleBoard:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">board</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSMutableSet</span> <span class="o">*</span> <span class="n">nodes</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableSet</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSMutableDictionary</span> <span class="o">*</span> <span class="n">dictionary</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableDictionary</span> <span class="n">dictionary</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSMutableArray</span> <span class="o">*</span> <span class="n">nodeBoard</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCapacity:</span><span class="n">board</span><span class="p">.</span><span class="n">count</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span> <span class="n">row</span> <span class="k">in</span> <span class="n">board</span><span class="p">){</span>
</span><span class='line'>        <span class="n">NSMutableArray</span> <span class="o">*</span> <span class="n">nodeRow</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableArray</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCapacity:</span><span class="n">row</span><span class="p">.</span><span class="n">count</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span> <span class="n">letter</span> <span class="k">in</span> <span class="n">row</span><span class="p">){</span>
</span><span class='line'>            <span class="n">Node</span> <span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Node</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>            <span class="n">node</span><span class="p">.</span><span class="n">letter</span> <span class="o">=</span> <span class="n">letter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">[</span><span class="n">nodeRow</span> <span class="nl">addObject:</span><span class="n">node</span><span class="p">];</span>
</span><span class='line'>            <span class="p">[</span><span class="n">nodes</span> <span class="nl">addObject:</span><span class="n">node</span><span class="p">];</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">dictionary</span><span class="p">[</span><span class="n">node</span><span class="p">.</span><span class="n">letter</span><span class="p">]){</span>
</span><span class='line'>                <span class="p">[</span><span class="n">dictionary</span><span class="p">[</span><span class="n">node</span><span class="p">.</span><span class="n">letter</span><span class="p">]</span> <span class="nl">addObject:</span><span class="n">node</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>                <span class="n">dictionary</span><span class="p">[</span><span class="n">node</span><span class="p">.</span><span class="n">letter</span><span class="p">]</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span><span class="n">node</span><span class="p">].</span><span class="n">mutableCopy</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="p">[</span><span class="n">nodeBoard</span> <span class="nl">addObject:</span><span class="n">nodeRow</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span> <span class="n">previousRow</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">nodeBoard</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="n">row</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">NSArray</span> <span class="o">*</span> <span class="n">nodeRow</span> <span class="o">=</span> <span class="n">nodeBoard</span><span class="p">[</span><span class="n">row</span><span class="p">];</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">NSInteger</span> <span class="n">col</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">col</span> <span class="o">&lt;</span> <span class="n">nodeRow</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="n">col</span> <span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">Node</span> <span class="o">*</span> <span class="n">currentNode</span> <span class="o">=</span> <span class="n">nodeBoard</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">];</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">col</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">nodeRow</span><span class="p">.</span><span class="n">count</span><span class="p">)</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="n">Node</span> <span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">previousRow</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">node</span><span class="p">){</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">currentNode</span><span class="p">.</span><span class="n">adjacentNodes</span> <span class="nl">addObject:</span><span class="n">node</span><span class="p">];</span>
</span><span class='line'>                    <span class="p">[</span><span class="n">node</span><span class="p">.</span><span class="n">adjacentNodes</span> <span class="nl">addObject:</span><span class="n">currentNode</span><span class="p">];</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">col</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="n">Node</span> <span class="o">*</span> <span class="n">node</span> <span class="o">=</span> <span class="n">nodeBoard</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'>                <span class="p">[</span><span class="n">currentNode</span><span class="p">.</span><span class="n">adjacentNodes</span> <span class="nl">addObject:</span><span class="n">node</span><span class="p">];</span>
</span><span class='line'>                <span class="p">[</span><span class="n">node</span><span class="p">.</span><span class="n">adjacentNodes</span> <span class="nl">addObject:</span><span class="n">currentNode</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">previousRow</span> <span class="o">=</span> <span class="n">nodeRow</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">Graph</span> <span class="o">*</span> <span class="n">graph</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Graph</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">graph</span><span class="p">.</span><span class="n">lookupDictionary</span> <span class="o">=</span> <span class="n">dictionary</span><span class="p">;</span>
</span><span class='line'>    <span class="n">graph</span><span class="p">.</span><span class="n">nodes</span> <span class="o">=</span> <span class="n">nodes</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">graph</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">BOOL</span> <span class="nf">depthFirstSearch</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span> <span class="n">node</span><span class="p">,</span> <span class="n">NSString</span> <span class="o">*</span> <span class="n">word</span><span class="p">,</span> <span class="n">NSInteger</span> <span class="n">depth</span><span class="p">,</span> <span class="n">NSMutableSet</span> <span class="o">*</span> <span class="n">visitedNodes</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">unichar</span> <span class="n">nodeLetter</span> <span class="o">=</span> <span class="p">[</span><span class="n">node</span><span class="p">.</span><span class="n">letter</span> <span class="nl">characterAtIndex:</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>    <span class="n">unichar</span> <span class="n">wordLetter</span> <span class="o">=</span> <span class="p">[</span><span class="n">word</span> <span class="nl">characterAtIndex:</span><span class="n">depth</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">visitedNodes</span> <span class="nl">addObject:</span><span class="n">node</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">nodeLetter</span> <span class="o">==</span> <span class="n">wordLetter</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">depth</span> <span class="o">&lt;</span> <span class="n">word</span><span class="p">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="n">Node</span> <span class="o">*</span> <span class="n">adjacentNode</span> <span class="k">in</span> <span class="n">node</span><span class="p">.</span><span class="n">adjacentNodes</span><span class="p">){</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">([</span><span class="n">visitedNodes</span> <span class="nl">containsObject:</span><span class="n">adjacentNode</span><span class="p">])</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="kt">BOOL</span> <span class="n">found</span> <span class="o">=</span> <span class="n">depthFirstSearch</span><span class="p">(</span><span class="n">adjacentNode</span><span class="p">,</span> <span class="n">word</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">visitedNodes</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">)</span> <span class="k">return</span> <span class="n">found</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">visitedNodes</span> <span class="nl">removeObject:</span><span class="n">node</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">searchForWord:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">word</span><span class="p">{</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span> <span class="n">firstLetter</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%c&quot;</span><span class="p">,[</span><span class="n">word</span> <span class="nl">characterAtIndex:</span><span class="mi">0</span><span class="p">]];</span>
</span><span class='line'>    <span class="n">NSSet</span> <span class="o">*</span> <span class="n">firstNodes</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">lookupDictionary</span><span class="p">[</span><span class="n">firstLetter</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">Node</span> <span class="o">*</span> <span class="n">node</span> <span class="k">in</span> <span class="n">firstNodes</span><span class="p">){</span>
</span><span class='line'>        <span class="n">NSMutableSet</span> <span class="o">*</span> <span class="n">visitedNodes</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableSet</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCapacity:</span><span class="n">word</span><span class="p">.</span><span class="n">length</span><span class="p">];</span>
</span><span class='line'>        <span class="kt">BOOL</span> <span class="n">found</span> <span class="o">=</span> <span class="n">depthFirstSearch</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">word</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">visitedNodes</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">)</span> <span class="k">return</span> <span class="n">found</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSArray</span> <span class="o">*</span> <span class="n">boggleBoard</span> <span class="o">=</span> <span class="err">@</span><span class="p">[</span>
</span><span class='line'>                                  <span class="err">@</span><span class="p">[</span><span class="s">@&quot;a&quot;</span><span class="p">,</span> <span class="s">@&quot;b&quot;</span><span class="p">,</span> <span class="s">@&quot;c&quot;</span><span class="p">],</span>
</span><span class='line'>                                  <span class="err">@</span><span class="p">[</span><span class="s">@&quot;d&quot;</span><span class="p">,</span> <span class="s">@&quot;d&quot;</span><span class="p">,</span> <span class="s">@&quot;h&quot;</span><span class="p">],</span>
</span><span class='line'>                                  <span class="err">@</span><span class="p">[</span><span class="s">@&quot;e&quot;</span><span class="p">,</span> <span class="s">@&quot;i&quot;</span><span class="p">,</span> <span class="s">@&quot;u&quot;</span><span class="p">]</span>
</span><span class='line'>                                  <span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Graph</span> <span class="o">*</span> <span class="n">graph</span> <span class="o">=</span> <span class="p">[</span><span class="n">Graph</span> <span class="nl">graphForBoggleBoard:</span><span class="n">boggleBoard</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSLog</span> <span class="p">(</span><span class="s">@&quot;Word %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">graph</span> <span class="nl">searchForWord:</span><span class="s">@&quot;chuddd&quot;</span><span class="p">]</span> <span class="o">?</span> <span class="s">@&quot;exists&quot;</span> <span class="o">:</span> <span class="s">@&quot;doesnt exist&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
